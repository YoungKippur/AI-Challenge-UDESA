using System.Collections.Generic;
using System.Linq;
using Functional.Maybe;

namespace Package.Etermax.EterChallenge.Users.Domain
{
    public class User
    {
        public readonly string Id;
        public readonly Credentials Credentials;
        public readonly Profile Profile;
        public readonly bool IsNew;
        public readonly List<Identity> Identities;

        public bool IsAuthenticated
        {
            get { return Identities.Count > 0; }
        }

        public User(string id, Credentials credentials, Profile profile = null, bool isNew = false,
            List<Identity> identities = null)
        {
            Id = id;
            Credentials = credentials;
            Profile = profile ?? Profile.Empty();
            IsNew = isNew;
            Identities = identities ?? new List<Identity>();
        }

        public static User NewGuest(string id, string accessToken, string refreshToken)
        {
            return new User(id, new Credentials(accessToken, refreshToken));
        }

        public bool HasIdentityWithProvider(string provider)
        {
            return Identities.Any(identity => identity.Provider == provider);
        }

        public Maybe<Identity> GetIdentityFor(string provider)
        {
            return Identities.FirstOrDefault(identity => identity.Provider == provider).ToMaybe();
        }
    }
}