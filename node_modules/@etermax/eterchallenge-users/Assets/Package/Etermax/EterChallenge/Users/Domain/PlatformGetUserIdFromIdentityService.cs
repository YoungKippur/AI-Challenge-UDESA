using System;
using Etermax.Json;
using Etermax.Web.Client;
using Etermax.Web.Client.ReactiveExtensions;
using Package.Etermax.EterChallenge.Users.Domain.Errors;
using UniRx;

namespace Package.Etermax.EterChallenge.Users.Domain
{
    public class PlatformGetUserIdFromIdentityService : IGetUserIdFromIdentityService
    {
        private const string Resource = "/games/:gameId/users/provider/:provider/providerUserId/:providerUserId";
        private readonly string _apiUrl;
        private readonly string _gameId;
        private readonly IWebClient _webClient;
        private readonly IScheduler _scheduler;

        public PlatformGetUserIdFromIdentityService(string apiUrl, string gameId, IWebClient webClient,
            IScheduler scheduler = null)
        {
            if (scheduler == null)
                scheduler = Scheduler.ThreadPool;
            _scheduler = scheduler;
            _apiUrl = apiUrl;
            _gameId = gameId;
            _webClient = webClient;
        }

        public IObservable<string> Execute(string provider, string providerUserId)
        {
            return _webClient.Get(_apiUrl + Resource)
                .ReplacePathParam("gameId", _gameId)
                .ReplacePathParam(":provider", provider)
                .ReplacePathParam(":providerUserId", providerUserId)
                .Send()
                .ThrowOn(HttpStatusCode.Any400, error => new IdentityNotFoundException())
                .ObserveOn(_scheduler)
                .Select(webResponse => ExtractUserId(webResponse.Body));
        }

        private static string ExtractUserId(string json)
        {
            return JsonObject.FromJson(json).GetString("userId");
        }
    }
}